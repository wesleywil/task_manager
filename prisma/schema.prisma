// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          Int            @id @default(autoincrement())
  name        String
  description String?        @db.Text()
  status      Project_Status @default(IN_PROGRESS)
  priority    Priority       @default(MEDIUM)
  start_date  DateTime       @default(now()) @db.DateTime(0)
  due_date    DateTime       @db.DateTime(0)
  favorite    Boolean        @default(false)
  tasks       Task[]
  categories  Category[]
  userId      String
  user        User           @relation(fields: [userId], references: [id])
}

model Task {
  id          Int         @id @default(autoincrement())
  title       String
  description String?     @db.Text()
  status      Task_Status @default(TO_DO)
  priority    Priority    @default(MEDIUM)
  due_date    DateTime    @db.DateTime(0)
  tags        Tag[]
  projectId   Int
  project     Project     @relation(fields: [projectId], references: [id])
}

model Tag {
  id          Int     @id @default(autoincrement())
  title       String
  description String? @db.Text()
  taskId      Int
  task        Task    @relation(fields: [taskId], references: [id])
}

model Category {
  id          Int     @id @default(autoincrement())
  title       String
  description String? @db.Text()
  projectId   Int
  project     Project @relation(fields: [projectId], references: [id])
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Project_Status {
  IN_PROGRESS
  COMPLETED
  PENDING
}

enum Task_Status {
  TO_DO
  IN_PROGRESS
  COMPLETED
  BLOCKED
}
